[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mythcommflagwrapper"
dynamic = ["version"]
description = 'Wrapper around Comskip for MythTV'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "Charlie Rusbridger", email = "charlie@rusbridger.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/charrus/mythcommflagwrapper#readme"
Issues = "https://github.com/charrus/mythcommflagwrapper/issues"
Source = "https://github.com/charrus/mythcommflagwrapper"

[tool.hatch.version]
path = "src/mythcommflagwrapper/__about__.py"

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/mythcommflagwrapper tests}"

[tool.coverage.run]
source_pkgs = ["mythcommflagwrapper", "tests"]
branch = true
parallel = true
omit = [
  "src/mythcommflagwrapper/__about__.py",
]

[tool.coverage.paths]
mythcommflagwrapper = ["src/mythcommflagwrapper", "*/mythcommflagwrapper/src/mythcommflagwrapper"]
tests = ["tests", "*/mythcommflagwrapper/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[project.script]
mythcommflagwrapper = "mythcommflagwrapper"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
target-version = "py38"
line-length = 79

[tool.ruff.lint]
extend-select = [
  'D',
  'E',
  'W',
  'F',
  'I001',
  'E501',
  'RUF',
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.tox]
requires = ["tox>=4"]
env_list = ["3.12", "type"]

[tool.tox.env.type]
description = "run type check on code base"
deps = ["mypy==1.11.2", "types-cachetools>=5.5.0.20240820", "types-chardet>=5.0.4.6"]
commands = [["mypy", "src"]]